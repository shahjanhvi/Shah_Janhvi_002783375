/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.BookAppointment;
import model.BookAppointmentDirectory;
import model.City;
import model.CityDirectory;
import model.Community;
import model.CommunityDirectory;
import model.Doctor;
import model.DoctorDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.Patient;
import model.PatientDirectory;

/**
 *
 * @author Janhvi Shah
 */
public class MainHospitalJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MainHospitalJPanel
     */
    JSplitPane splitPanel;
    HospitalDirectory hospitalDirectory;
    PatientDirectory directory;
    DoctorDirectory doctorDirectory;
    CityDirectory cityDirectory;
    CommunityDirectory communityDirectory;
    BookAppointmentDirectory bookAppointmentDirectory;
    
    private static int counterHospital = 100;
    private static int counterDoctor = 10;
    private static int counterPatient =100;
    
    public MainHospitalJPanel(JSplitPane splitPanel, HospitalDirectory hospitalDirectory,
    PatientDirectory directory, DoctorDirectory doctorDirectory,
    CityDirectory cityDirectory, CommunityDirectory communityDirectory,
    BookAppointmentDirectory bookAppointmentDirectory ) {
        
        initComponents();
        this.splitPanel = splitPanel;
        this.hospitalDirectory = hospitalDirectory;
        this.directory = directory;
        this.doctorDirectory = doctorDirectory;
        this.cityDirectory = cityDirectory;
        this.communityDirectory = communityDirectory;
        this.bookAppointmentDirectory = bookAppointmentDirectory;
        
        populateTableHospital();
        populateTableDoctor();
        populateTablePatient();
        populateTableAppointment();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogOut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHospital = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoctor = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnViewHospital = new javax.swing.JButton();
        btnUpdateHospital = new javax.swing.JButton();
        btnAddHospital = new javax.swing.JButton();
        btnViewDoctor = new javax.swing.JButton();
        btnUpdateDoctor = new javax.swing.JButton();
        btnAddDoctor = new javax.swing.JButton();
        btnViewPatient = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtHospitalName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        dropDownHospitalCity = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        dropDownHospitalCommunity = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtHospitalMobileNo = new javax.swing.JTextField();
        txtDoctorGender = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        txtDoctorUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtDoctorPassword = new javax.swing.JTextField();
        lblHospital = new javax.swing.JLabel();
        dropDownDoctorHospital = new javax.swing.JComboBox<>();
        lblFirstName = new javax.swing.JLabel();
        txtDoctorFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtDoctorLastName = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtDoctorAge = new javax.swing.JTextField();
        lblMobileNo = new javax.swing.JLabel();
        txtDoctorMobileNo = new javax.swing.JTextField();
        txtPatientMobileNo = new javax.swing.JTextField();
        txtPatientLastName = new javax.swing.JTextField();
        txtPatientGender = new javax.swing.JTextField();
        lblUsername1 = new javax.swing.JLabel();
        txtPatientFirstName = new javax.swing.JTextField();
        lblAge1 = new javax.swing.JLabel();
        lblGender1 = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        txtPatientCommunity = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtPatientCity = new javax.swing.JTextField();
        txtPatientUsername = new javax.swing.JTextField();
        lblLastName1 = new javax.swing.JLabel();
        txtPatientAge = new javax.swing.JTextField();
        lblMobileNo1 = new javax.swing.JLabel();
        lblFirstName1 = new javax.swing.JLabel();
        txtPatientPassword = new javax.swing.JTextField();
        lblPassword1 = new javax.swing.JLabel();
        createEmployeeLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 153, 153));

        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        tblHospital.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hospital ID", "Name", "Community", "Mobile No."
            }
        ));
        jScrollPane1.setViewportView(tblHospital);

        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor", "First Name", "Hospital"
            }
        ));
        jScrollPane2.setViewportView(tblDoctor);

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient ID", "First Name", "Community", "City"
            }
        ));
        jScrollPane3.setViewportView(tblPatient);

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Doctor", "Hospital", "Community", "Date"
            }
        ));
        jScrollPane4.setViewportView(tblAppointment);

        jLabel2.setText("Hospital Record");

        jLabel3.setText("Doctor Record");

        jLabel4.setText("Appointments");

        jLabel5.setText("Patient Records");

        btnViewHospital.setText("View Hospital");
        btnViewHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHospitalActionPerformed(evt);
            }
        });

        btnUpdateHospital.setText("Update Hospital");
        btnUpdateHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateHospitalActionPerformed(evt);
            }
        });

        btnAddHospital.setText("Add Hospital");
        btnAddHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHospitalActionPerformed(evt);
            }
        });

        btnViewDoctor.setText("View Doctor");
        btnViewDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDoctorActionPerformed(evt);
            }
        });

        btnUpdateDoctor.setText("Update Doctor");
        btnUpdateDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDoctorActionPerformed(evt);
            }
        });

        btnAddDoctor.setText("Add Doctor");
        btnAddDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDoctorActionPerformed(evt);
            }
        });

        btnViewPatient.setText("View Patient");
        btnViewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPatientActionPerformed(evt);
            }
        });

        jLabel6.setText("Hospital Name:");

        txtHospitalName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHospitalNameActionPerformed(evt);
            }
        });

        jLabel7.setText("City:");

        dropDownHospitalCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dropDownHospitalCityItemStateChanged(evt);
            }
        });
        dropDownHospitalCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownHospitalCityActionPerformed(evt);
            }
        });

        jLabel8.setText("Community:");

        dropDownHospitalCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownHospitalCommunityActionPerformed(evt);
            }
        });

        jLabel9.setText("Mobile No.:");

        lblUsername.setText("Username:");

        txtDoctorUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorUsernameActionPerformed(evt);
            }
        });

        lblPassword.setText("Password:");

        txtDoctorPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorPasswordActionPerformed(evt);
            }
        });

        lblHospital.setText("Hospital:");

        lblFirstName.setText("First Name:");

        lblLastName.setText("Last Name:");

        txtDoctorLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorLastNameActionPerformed(evt);
            }
        });

        lblAge.setText("Age:");

        lblGender.setText("Gender:");

        txtDoctorAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorAgeActionPerformed(evt);
            }
        });

        lblMobileNo.setText("Mobile No:");

        txtDoctorMobileNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorMobileNoActionPerformed(evt);
            }
        });

        txtPatientMobileNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientMobileNoActionPerformed(evt);
            }
        });
        txtPatientMobileNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientMobileNoKeyPressed(evt);
            }
        });

        txtPatientLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientLastNameActionPerformed(evt);
            }
        });

        lblUsername1.setText("Username:");

        txtPatientFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientFirstNameActionPerformed(evt);
            }
        });

        lblAge1.setText("Age:");

        lblGender1.setText("Gender:");

        lblCommunity.setText("Community:");

        lblCity.setText("City:");

        txtPatientUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientUsernameActionPerformed(evt);
            }
        });

        lblLastName1.setText("Last Name:");

        txtPatientAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientAgeActionPerformed(evt);
            }
        });

        lblMobileNo1.setText("Mobile No:");

        lblFirstName1.setText("First Name:");

        txtPatientPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientPasswordActionPerformed(evt);
            }
        });

        lblPassword1.setText("Password:");

        createEmployeeLabel.setBackground(new java.awt.Color(255, 204, 255));
        createEmployeeLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        createEmployeeLabel.setForeground(new java.awt.Color(51, 51, 51));
        createEmployeeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createEmployeeLabel.setText("HOSPITAL MANAGEMENT PAGE");
        createEmployeeLabel.setToolTipText("To create new employee");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(188, 188, 188)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewHospital)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateHospital)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddHospital)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnViewDoctor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateDoctor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddDoctor)
                        .addGap(91, 91, 91))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(jLabel5))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPassword1)
                                .addGap(18, 18, 18)
                                .addComponent(txtPatientPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblFirstName1)
                                    .addGap(9, 9, 9)
                                    .addComponent(txtPatientFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblLastName1)
                                        .addComponent(lblUsername1))
                                    .addGap(9, 9, 9)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtPatientUsername, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPatientLastName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblAge1)
                                                .addComponent(lblGender1)
                                                .addComponent(lblMobileNo1)
                                                .addComponent(lblCity))
                                            .addGap(9, 9, 9))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lblCommunity)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtPatientCommunity, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPatientMobileNo, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPatientAge, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPatientCity, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPatientGender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblLastName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDoctorLastName))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblFirstName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDoctorFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(21, 21, 21))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblAge)
                                            .addComponent(lblGender))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtDoctorGender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDoctorAge, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblMobileNo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDoctorMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(lblHospital)
                                            .addGap(18, 18, 18)
                                            .addComponent(dropDownDoctorHospital, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(lblPassword)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtDoctorPassword))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(lblUsername)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtDoctorUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtHospitalName)
                    .addComponent(dropDownHospitalCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dropDownHospitalCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtHospitalMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(702, 702, 702))
            .addGroup(layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(386, 386, 386))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLogOut)
                .addGap(229, 229, 229)
                .addComponent(createEmployeeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnLogOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createEmployeeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewHospital)
                    .addComponent(btnUpdateHospital)
                    .addComponent(btnAddHospital)
                    .addComponent(btnViewDoctor)
                    .addComponent(btnUpdateDoctor)
                    .addComponent(btnAddDoctor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropDownHospitalCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropDownHospitalCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHospitalMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFirstName)
                            .addComponent(txtDoctorFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastName)
                            .addComponent(txtDoctorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAge)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(lblGender))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDoctorMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMobileNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUsername)
                            .addComponent(txtDoctorUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword)
                            .addComponent(txtDoctorPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDoctorAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHospital)
                            .addComponent(dropDownDoctorHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDoctorGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewPatient)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblFirstName1)
                                    .addComponent(txtPatientFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLastName1)
                                    .addComponent(txtPatientLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPatientUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblUsername1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAge1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblGender1)
                                            .addComponent(txtPatientGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPatientMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMobileNo1))
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPatientCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCommunity))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPatientCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCity))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPassword1)
                            .addComponent(txtPatientPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        MainJFrame topFrame = (MainJFrame) SwingUtilities.getWindowAncestor(this);
        topFrame.loadDefaultState();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnUpdateDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDoctorActionPerformed
        // TODO add your handling code here:
        if(String.valueOf(txtDoctorMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtDoctorMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtDoctorMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        
        if(txtDoctorFirstName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtDoctorFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtDoctorLastName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Last Name field empty!");
            return;
        }
        if(!isLetter(txtDoctorFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtDoctorUsername.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Username field empty!");
            return;
        }   
        if(txtDoctorPassword.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Password field empty!");
            return;
        }
        if(!isDigit(txtDoctorAge.getText())){
            JOptionPane.showMessageDialog(this,"Please enter Age number!");
            return;
        }
             int selectedRowIndex = tblDoctor.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;            

        }
//        txtDoctorID.setEditable(false);
//        int doctorID = Integer.parseInt(txtDoctorID.getText());
        String firstName = txtDoctorFirstName.getText();
        String lastName = txtDoctorLastName.getText();
        String username = txtDoctorUsername.getText();
        int age = Integer.parseInt(txtDoctorAge.getText());
        String gender = txtDoctorGender.getText();
        Long mobileNo = Long.parseLong(txtDoctorMobileNo.getText());
        String password = txtDoctorPassword.getText();
        String hospital = String.valueOf(dropDownDoctorHospital.getSelectedItem());
//        String hospital = txtHospital.getText();
        
        Doctor d = doctorDirectory.searchDoctorByFirstName(firstName);
//        d.setPersonID(doctorID);
        d.setFirstName(firstName);
        d.setLastName(lastName);
        d.setUsername(username);
        d.setAge(age);
        d.setGender(gender);
        d.setMobileNo(mobileNo);
        d.setHospital(hospital);
        
        JOptionPane.showMessageDialog(this, "Record Updated.");
        
//        txtDoctorID.setText("");
//        tDoctorxtDoctorID.setEditable(false);
        txtDoctorFirstName.setText("");
        txtDoctorLastName.setText("");
        txtDoctorUsername.setText("");
        txtDoctorPassword.setText("");
        txtDoctorAge.setText("");
        txtDoctorGender.setText("");
        txtDoctorMobileNo.setText("");
    }//GEN-LAST:event_btnUpdateDoctorActionPerformed

    private void txtHospitalNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHospitalNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHospitalNameActionPerformed

    private void dropDownHospitalCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dropDownHospitalCityItemStateChanged
        // TODO add your handling code here:
        String city = String.valueOf(dropDownHospitalCity.getSelectedItem());
        for(Community community : CommunityDirectory.getCommunityDirectory())   {
            if(community.getCity().getCity().equals(city)){
                dropDownHospitalCommunity.addItem(community.getCommunity());
            }
        }
    }//GEN-LAST:event_dropDownHospitalCityItemStateChanged

    private void dropDownHospitalCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownHospitalCityActionPerformed
        // TODO add your handling code here:
        //        String city = String.valueOf(dropDownCity.getSelectedItem());
        //        for(Community community : CommunityDirectory.getCommunityDirectory())   {
            //            if(community.getCity().getCity().equals(city)){
                //                dropDownCommunity.addItem(community.getCommunity());
                //            }
            //        }
    }//GEN-LAST:event_dropDownHospitalCityActionPerformed

    private void dropDownHospitalCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownHospitalCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dropDownHospitalCommunityActionPerformed

    private void txtDoctorUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorUsernameActionPerformed

    private void txtDoctorPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorPasswordActionPerformed

    private void txtDoctorAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorAgeActionPerformed

    private void txtDoctorMobileNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorMobileNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorMobileNoActionPerformed

    private void txtPatientMobileNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientMobileNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientMobileNoActionPerformed

    private void txtPatientLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientLastNameActionPerformed

    private void txtPatientFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientFirstNameActionPerformed

    private void txtPatientUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientUsernameActionPerformed

    private void txtPatientAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientAgeActionPerformed

    private void btnUpdateHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateHospitalActionPerformed
        // TODO add your handling code here:
        if(txtHospitalName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtHospitalName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(String.valueOf(txtHospitalMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtHospitalMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtHospitalMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        int selectedRowIndex = tblHospital.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;
        }
        String name = txtHospitalName.getText();
        String city = String.valueOf(dropDownHospitalCity.getSelectedItem());
        String community = dropDownHospitalCommunity.getSelectedItem().toString();
        String mobile = txtHospitalMobileNo.getText();
        
        Community c = communityDirectory.addNewCommunity();
        c.setCommunity(community);
        c.setCity(new City(city));
        
        Hospital h = HospitalDirectory.searchHospitalByName(txtHospitalName.getText());
//        h.setHospitalID(Integer.parseInt(hospitalID));
        h.setHospitalName(name);
        h.setCommunity(c);
        h.setMobileNo(Long.parseLong(mobile));
        JOptionPane.showMessageDialog(this, "Hospital Record Uploaded.");
        txtHospitalName.setText("");
        txtHospitalMobileNo.setText("");       
    }//GEN-LAST:event_btnUpdateHospitalActionPerformed

    private void txtDoctorLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorLastNameActionPerformed

    private void txtPatientPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientPasswordActionPerformed

    private void btnViewHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHospitalActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHospital.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblHospital.getModel();
        Hospital h = (Hospital)model.getValueAt(selectedRowIndex, 0);
        
//        txtHospitalID.setText(String.valueOf(h.getHospitalID()));
//        txtHospitalID.setEditable(false);
        txtHospitalName.setText(String.valueOf(h.getHospitalName()));
        dropDownHospitalCity.setSelectedItem(String.valueOf(h.getCommunity().getCity().getCity()));
        dropDownHospitalCommunity.setSelectedItem(String.valueOf(h.getCommunity().getCommunity()));
        txtHospitalMobileNo.setText(String.valueOf(h.getMobileNo()));
    }//GEN-LAST:event_btnViewHospitalActionPerformed

    private boolean isDigit(String s) {
        char[] chArr = s.toCharArray();
        for(char c: chArr) {
            if(!Character.isDigit(c))
                return false;
        }
        return true;
    }
    private boolean isLetter(String text) {
        char[] chArr = text.toCharArray();
        for(char c: chArr) {
            if(!Character.isLetter(c))
                return false;
        }
        return true;
    }
    
    private void btnAddHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHospitalActionPerformed
        // TODO add your handling code here:
        
         if(txtHospitalName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtHospitalName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(String.valueOf(txtHospitalMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtHospitalMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtHospitalMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        int hospitalID = counterHospital;
        counterHospital++;
        String name = txtHospitalName.getText();
        String city = String.valueOf(dropDownHospitalCity.getSelectedItem());
        String community = dropDownHospitalCommunity.getSelectedItem().toString();
        String mobile = txtHospitalMobileNo.getText();
        
        Community c = communityDirectory.addNewCommunity();
        c.setCommunity(community);
        c.setCity(new City(city));
        
        Hospital h = HospitalDirectory.addNewHospital();
        h.setHospitalID(hospitalID);
        h.setHospitalName(name);
        h.setCommunity(c);
        h.setMobileNo(Long.parseLong(mobile));
        JOptionPane.showMessageDialog(this, "New Hospital Record Added.");
//        System.out.println(h.getHospitalName());
        
        txtHospitalName.setText("");
        txtHospitalMobileNo.setText("");
    }//GEN-LAST:event_btnAddHospitalActionPerformed

    private void btnViewDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDoctorActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctor.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;            
        }
        
        DefaultTableModel model = (DefaultTableModel) tblDoctor.getModel();
        Doctor d = (Doctor)model.getValueAt(selectedRowIndex, 0);
        
//        txtDoctorID.setText(String.valueOf(d.getPersonID()));
//        txtDoctorID.setEditable(false);
        txtDoctorFirstName.setText(d.getFirstName());
        txtDoctorLastName.setText(d.getLastName());
        txtDoctorUsername.setText(d.getUsername());
        txtDoctorPassword.setText(d.getPassword());
        txtDoctorAge.setText(String.valueOf(d.getAge()));
        txtDoctorGender.setText(d.getGender());
        txtDoctorMobileNo.setText(String.valueOf(d.getMobileNo()));
        dropDownDoctorHospital.setSelectedItem(d.getHospital());
//        txtHospital.setText(d.getHospital());
    }//GEN-LAST:event_btnViewDoctorActionPerformed

    private void btnAddDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDoctorActionPerformed
        // TODO add your handling code here:
        if(String.valueOf(txtDoctorMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtDoctorMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtDoctorMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        
        if(txtDoctorFirstName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtDoctorFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtDoctorLastName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Last Name field empty!");
            return;
        }
        if(!isLetter(txtDoctorFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtDoctorUsername.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Username field empty!");
            return;
        }   
        if(txtDoctorPassword.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Password field empty!");
            return;
        } 
        if(!isDigit(txtDoctorAge.getText())){
            JOptionPane.showMessageDialog(this,"Please enter Age number!");
            return;
        }
        
        
        int doctorID = counterDoctor;
        counterDoctor++;
        String firstName = txtDoctorFirstName.getText();
        String lastName = txtDoctorLastName.getText();
        String username = txtDoctorUsername.getText();
        int age = Integer.parseInt(txtDoctorAge.getText());
        String gender = txtDoctorGender.getText();
        Long mobileNo = Long.parseLong(txtDoctorMobileNo.getText());
        String password = txtDoctorPassword.getText();
        String hospital = String.valueOf(dropDownDoctorHospital.getSelectedItem());
       
        doctorDirectory.addDoctor(new Doctor(username, password, "Doctor",firstName,lastName,doctorID,age, mobileNo, gender, hospital));
        
        JOptionPane.showMessageDialog(this, "Record Added.");
        
        txtDoctorFirstName.setText("");
        txtDoctorLastName.setText("");
        txtDoctorUsername.setText("");
        txtDoctorPassword.setText("");
        txtDoctorAge.setText("");
        txtDoctorGender.setText("");
        txtDoctorMobileNo.setText("");
    }//GEN-LAST:event_btnAddDoctorActionPerformed

    private void btnViewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPatientActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatient.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;            
        }
        
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        Patient p = (Patient)model.getValueAt(selectedRowIndex, 0);
        
        txtPatientFirstName.setText(p.getFirstName());
        txtPatientLastName.setText(p.getLastName());
        txtPatientUsername.setText(p.getUserName());
        txtPatientPassword.setText(p.getPassword());
        txtPatientAge.setText(String.valueOf(p.getAge()));
        txtPatientGender.setText(p.getGender());
        txtPatientMobileNo.setText(String.valueOf(p.getMobileNo()));
        txtPatientCommunity.setText(String.valueOf(p.getCommunity()));
        txtPatientCity.setText(String.valueOf(p.getCity()));
    }//GEN-LAST:event_btnViewPatientActionPerformed

    private void txtPatientMobileNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientMobileNoKeyPressed
        // TODO add your handling code here:
        char var = evt.getKeyChar();
        if(Character.isLetter(var)){
            txtPatientMobileNo.setEditable(false);
            JOptionPane.showMessageDialog(null, "Character not allowed");
            txtPatientMobileNo.requestFocus();
            txtPatientMobileNo.setEditable(true);
        }
        String phoneNo = txtPatientMobileNo.getText();
        int length = phoneNo.length();
        if(length>9){
            txtPatientMobileNo.setEditable(false);
        }
        if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE){
            txtPatientMobileNo.setEditable(true);
        }
    }//GEN-LAST:event_txtPatientMobileNoKeyPressed
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDoctor;
    private javax.swing.JButton btnAddHospital;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnUpdateDoctor;
    private javax.swing.JButton btnUpdateHospital;
    private javax.swing.JButton btnViewDoctor;
    private javax.swing.JButton btnViewHospital;
    private javax.swing.JButton btnViewPatient;
    private javax.swing.JLabel createEmployeeLabel;
    private javax.swing.JComboBox<String> dropDownDoctorHospital;
    private javax.swing.JComboBox<String> dropDownHospitalCity;
    private javax.swing.JComboBox<String> dropDownHospitalCommunity;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblAge1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblFirstName1;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGender1;
    private javax.swing.JLabel lblHospital;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblLastName1;
    private javax.swing.JLabel lblMobileNo;
    private javax.swing.JLabel lblMobileNo1;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPassword1;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblUsername1;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTable tblDoctor;
    private javax.swing.JTable tblHospital;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtDoctorAge;
    private javax.swing.JTextField txtDoctorFirstName;
    private javax.swing.JTextField txtDoctorGender;
    private javax.swing.JTextField txtDoctorLastName;
    private javax.swing.JTextField txtDoctorMobileNo;
    private javax.swing.JTextField txtDoctorPassword;
    private javax.swing.JTextField txtDoctorUsername;
    private javax.swing.JTextField txtHospitalMobileNo;
    private javax.swing.JTextField txtHospitalName;
    private javax.swing.JTextField txtPatientAge;
    private javax.swing.JTextField txtPatientCity;
    private javax.swing.JTextField txtPatientCommunity;
    private javax.swing.JTextField txtPatientFirstName;
    private javax.swing.JTextField txtPatientGender;
    private javax.swing.JTextField txtPatientLastName;
    private javax.swing.JTextField txtPatientMobileNo;
    private javax.swing.JTextField txtPatientPassword;
    private javax.swing.JTextField txtPatientUsername;
    // End of variables declaration//GEN-END:variables

    private void populateTableHospital() {
        DefaultTableModel model = (DefaultTableModel) tblHospital.getModel();
        model.setRowCount(0);
        
        for(Hospital h: HospitalDirectory.getHospitalDirectory()){
            Object[] row = new Object[4];
            row[0] = h;
//            System.out.println(".............."+row[0]);
            row[1] = h.getHospitalName();
            row[2] = h.getCommunity().getCommunity();
            row[3] = h.getMobileNo();
            model.addRow(row);
            
        }
    }

    private void populateTablePatient() {
         DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        
        for(Patient p : directory.getDirectory()){
            Object[] row = new Object[4];
            row[0] = p;
            System.out.println(".............."+row[0]);
            row[1] = p.getFirstName();
//            row[2] = p.getLastName();
//            row[3] = p.getGender();
            row[2] = p.getCommunity();
            row[3] = p.getCity();

            model.addRow(row);
        }
    }


    private void populateTableDoctor() {
        DefaultTableModel model = (DefaultTableModel) tblDoctor.getModel();
        model.setRowCount(0);
        
        for(Doctor p : doctorDirectory.getDoctorDirectory()){
            Object[] row = new Object[3];
            row[0] = p;
//            System.out.println(".............."+row[0]);
            row[1] = p.getFirstName();
            row[2] = p.getLastName();
//            row[3] = p.getGender();
//            row[4] = p.getCommunity();
//            row[5] = p.getCity();

            model.addRow(row);
        }
    }
    
    private void populateTableAppointment() {
        DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
        model.setRowCount(0);
        
        for(BookAppointment b: BookAppointmentDirectory.getBookAppointmentDirectory()){
            Object[] row = new Object[5];
            row[0] = b;
            row[4] = b.getDate();
//            System.out.println(".............."+row[0]);
            row[1] = b.getDoctorName();
            row[2] = b.getHospitalName();
            row[3] = b.getCommunity();
            row[4] = b.getDate();
            model.addRow(row);
            
        }
    }
}
