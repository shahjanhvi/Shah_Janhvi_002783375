/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.CityDirectory;
import model.CommunityDirectory;
import model.Doctor;
import model.DoctorDirectory;
import model.HospitalDirectory;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author Janhvi Shah
 */
public class SystemPersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemPersonJPanel
     */
    JSplitPane splitPanel;
    DoctorDirectory doctorDirectory;
    PatientDirectory directory;
    HospitalDirectory hospitalDirectory;
    CommunityDirectory communityDirectory;
    PersonDirectory personDirectory;
    CityDirectory cityDirectory;
    private static int counter = 500;
    public SystemPersonJPanel(JSplitPane splitPanel, PatientDirectory directory, 
            DoctorDirectory doctorDirectory, HospitalDirectory hospitalDirectory, 
            CommunityDirectory communityDirectory, PersonDirectory personDirectory, CityDirectory cityDirectory) {
        initComponents();
        this.splitPanel = splitPanel;
        this.directory = directory;
        this.doctorDirectory = doctorDirectory;
        this.hospitalDirectory = hospitalDirectory;
        this.communityDirectory = communityDirectory;
        this.personDirectory = personDirectory;
        txtPersonID.setEditable(false);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogOut = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtGender = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        dropDownSearch = new javax.swing.JComboBox<>();
        txtUsername = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        lblPersonID = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblMobileNo = new javax.swing.JLabel();
        txtMobileNo = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        dropDownRole = new javax.swing.JComboBox<>();
        txtPersonID = new javax.swing.JTextField();
        lblRole = new javax.swing.JLabel();
        createEmployeeLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 153, 153));

        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblUsername.setText("Username:");

        dropDownSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Person ID", "First Name", "Role" }));

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Person ID", "First Name", "Role"
            }
        ));
        jScrollPane1.setViewportView(tblPerson);

        btnView.setBackground(new java.awt.Color(0, 153, 255));
        btnView.setText("View Person");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(102, 255, 102));
        btnUpdate.setText("Update Person");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 51));
        btnDelete.setText("Delete Person");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(255, 255, 0));
        btnAdd.setText("Add new Person");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblPersonID.setText("Person ID:");

        lblFirstName.setText("First Name:");

        lblLastName.setText("Last Name:");

        lblAge.setText("Age:");

        lblGender.setText("Gender:");

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        lblMobileNo.setText("Mobile No:");

        txtMobileNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMobileNoActionPerformed(evt);
            }
        });
        txtMobileNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMobileNoKeyPressed(evt);
            }
        });

        lblSearch.setText("Search Person by:");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        lblPassword.setText("Password:");

        dropDownRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doctor", "Patient", "SystemAdmin", "CommunityAdmin", "HospitalAdmin", "Normal Person" }));

        lblRole.setText("Role:");

        createEmployeeLabel.setBackground(new java.awt.Color(153, 153, 153));
        createEmployeeLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        createEmployeeLabel.setForeground(new java.awt.Color(0, 71, 119));
        createEmployeeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createEmployeeLabel.setText("MANAGE PERSON RECORD");
        createEmployeeLabel.setToolTipText("To create new employee");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblAge)
                                            .addComponent(lblGender)
                                            .addComponent(lblMobileNo))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(9, 9, 9)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(txtAge, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtGender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                .addGap(213, 213, 213))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblPassword)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPassword))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblUsername)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtUsername))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblLastName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblFirstName)
                                            .addComponent(lblPersonID)
                                            .addComponent(lblRole))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dropDownRole, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtFirstName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                            .addComponent(txtPersonID))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSearch)
                                        .addGap(18, 18, 18)
                                        .addComponent(dropDownSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnBack)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnLogOut)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(createEmployeeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSearch)))))
                        .addContainerGap(222, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnLogOut)
                    .addComponent(createEmployeeLabel))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(dropDownSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropDownRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRole))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPersonID)
                    .addComponent(txtPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAge)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender)
                            .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMobileNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        MainJFrame topFrame = (MainJFrame) SwingUtilities.getWindowAncestor(this);
        topFrame.loadDefaultState();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        MainSystemJPanel mainSystem = new MainSystemJPanel(splitPanel,directory, doctorDirectory, hospitalDirectory, communityDirectory, personDirectory, cityDirectory);
        splitPanel.setRightComponent(mainSystem);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed
    private boolean isDigit(String s) {
        char[] chArr = s.toCharArray();
        for(char c: chArr) {
            if(!Character.isDigit(c))
                return false;
        }
        return true;
    }
    private boolean isLetter(String text) {
        char[] chArr = text.toCharArray();
        for(char c: chArr) {
            if(!Character.isLetter(c))
                return false;
        }
        return true;
    }
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String parameter = dropDownSearch.getSelectedItem().toString();
        String value = txtSearch.getText();
        Person p = personDirectory.searchPerson(parameter, value);
        populateTable(p);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPerson.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        Person p = (Person)model.getValueAt(selectedRowIndex, 0);

        dropDownRole.setSelectedItem(p.getRole());
//        dropDownRole.setEditable(false);
        txtPersonID.setText(String.valueOf(p.getPersonID()));
        txtPersonID.setEditable(false);
        txtFirstName.setText(p.getFirstName());
        txtLastName.setText(p.getLastName());
        txtUsername.setText(p.getUsername());
        txtPassword.setText(p.getPassword());
        txtAge.setText(String.valueOf(p.getAge()));
        txtGender.setText(p.getGender());
        txtMobileNo.setText(String.valueOf(p.getMobileNo()));
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if(String.valueOf(txtMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        if(txtFirstName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtLastName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Last Name field empty!");
            return;
        }
        if(!isLetter(txtFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtUsername.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Username field empty!");
            return;
        }   
        if(txtPassword.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Password field empty!");
            return;
        }
        if(!isDigit(txtAge.getText())){
            JOptionPane.showMessageDialog(this,"Please enter Age number!");
            return;
        }
        int selectedRowIndex = tblPerson.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;

        }
        
//        dropDownRole.setEditable(false);
        String role = dropDownRole.getSelectedItem().toString();
        txtPersonID.setEditable(false);
        int personID = Integer.parseInt(txtPersonID.getText());
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String username = txtUsername.getText();
        int age = Integer.parseInt(txtAge.getText());
        String gender = txtGender.getText();
        Long mobileNo = Long.parseLong(txtMobileNo.getText());
        String password = txtPassword.getText();

        Person p = personDirectory.searchPersonByDoctorID(personID);
        p.setRole(role);
        p.setPersonID(personID);
        p.setFirstName(firstName);
        p.setLastName(lastName);
        p.setUsername(username);
        p.setAge(age);
        p.setGender(gender);
        p.setMobileNo(mobileNo);

        JOptionPane.showMessageDialog(this, "Record Updated.");
        populateTable();

        txtPersonID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        txtAge.setText("");
        txtGender.setText("");
        txtMobileNo.setText("");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPerson.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;

        }

        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        Person p = (Person)model.getValueAt(selectedRowIndex, 0);

        personDirectory.deletePerson(p);
        JOptionPane.showMessageDialog(this, "Doctor record deleted!");
        populateTable();

        txtPersonID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        txtAge.setText("");
        txtGender.setText("");
        txtMobileNo.setText("");
        //        txtCommunity.setText("");
        //        txtCity.setText("");

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(String.valueOf(txtMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        if(txtFirstName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtLastName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Last Name field empty!");
            return;
        }
        if(!isLetter(txtFirstName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(txtUsername.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Username field empty!");
            return;
        }   
        if(txtPassword.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Password field empty!");
            return;
        }
        if(!isDigit(txtAge.getText())){
            JOptionPane.showMessageDialog(this,"Please enter Age number!");
            return;
        }

        int personID = counter;
        counter++;
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String username = txtUsername.getText();
        int age = Integer.parseInt(txtAge.getText());
        String gender = txtGender.getText();
        Long mobileNo = Long.parseLong(txtMobileNo.getText());
        String password = txtPassword.getText();
        String role = dropDownRole.getSelectedItem().toString();

        personDirectory.addPerson(new Person(username, password, role,firstName,lastName,personID,age, mobileNo, gender));

        JOptionPane.showMessageDialog(this, "Record Added.");
        populateTable();

        txtPersonID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        txtAge.setText("");
        txtGender.setText("");
        txtMobileNo.setText("");

    }//GEN-LAST:event_btnAddActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void txtMobileNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMobileNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMobileNoActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtMobileNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobileNoKeyPressed
        // TODO add your handling code here:
        char var = evt.getKeyChar();
        if(Character.isLetter(var)){
            txtMobileNo.setEditable(false);
            JOptionPane.showMessageDialog(null, "Character not allowed");
            txtMobileNo.requestFocus();
            txtMobileNo.setEditable(true);
        }
        String phoneNo = txtMobileNo.getText();
        int length = phoneNo.length();
        if(length>9){
            txtMobileNo.setEditable(false);
        }
        if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE){
            txtMobileNo.setEditable(true);
        }
    }//GEN-LAST:event_txtMobileNoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel createEmployeeLabel;
    private javax.swing.JComboBox<String> dropDownRole;
    private javax.swing.JComboBox<String> dropDownSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMobileNo;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPersonID;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTable tblPerson;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMobileNo;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPersonID;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        model.setRowCount(0);
        
        for(Person p : personDirectory.getPersonDirectory()) {
            Object row[] = new Object[3];
            row[0] = p;
            row[1] = p.getFirstName();
            row[2] = p.getRole();
            model.addRow(row);
        }
    }

    private void populateTable(Person p) {
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        model.setRowCount(0);
        Object row[] = new Object[3];
        row[0] = p.getPersonID();
        row[1] = p.getFirstName();
        row[2] = p.getRole();
        model.addRow(row);
        
    }
}
