/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDirectory;
import model.Community;
import model.CommunityDirectory;
import model.Doctor;
import model.DoctorDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author Janhvi Shah
 */
public class SystemHospitalJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemHospitalJPanel
     */
    JSplitPane splitPanel;
    DoctorDirectory doctorDirectory;
    PatientDirectory directory;
    HospitalDirectory hospitalDirectory;
    PersonDirectory personDirectory;
    CommunityDirectory communityDirectory;
    CityDirectory cityDirectory;
    private static int counter = 10;
    
    public SystemHospitalJPanel( JSplitPane splitPanel, PatientDirectory directory, 
            DoctorDirectory doctorDirectory, HospitalDirectory hospitalDirectory, 
            CommunityDirectory communityDirectory, PersonDirectory personDirectory, CityDirectory cityDirectory) {
        initComponents();
        this.splitPanel = splitPanel;
        this.directory = directory;
        this.doctorDirectory = doctorDirectory;
        this.hospitalDirectory = hospitalDirectory;
        this.communityDirectory = communityDirectory;
        this.cityDirectory = cityDirectory;
        
        for(City c: cityDirectory.getCityDirectory()){
            dropDownCity.addItem(c.getCity());
        }
        populateTable();
        txtHospitalID.setText("");
        txtHospitalID.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHospital = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtHospitalID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dropDownCity = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        dropDownCommunity = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtMobileNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoctor = new javax.swing.JTable();
        createEmployeeLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 153, 153));

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(0, 204, 255));
        btnView.setText("View Hospital");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        tblHospital.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hospital ID", "Name", "Community", "Mobile No."
            }
        ));
        jScrollPane1.setViewportView(tblHospital);

        btnUpdate.setBackground(new java.awt.Color(102, 255, 51));
        btnUpdate.setText("Update Hospital");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("Delete Hospital");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(255, 255, 0));
        btnAdd.setText("Add Hospital");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Hospital ID:");

        jLabel2.setText("Hospital Name:");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        jLabel3.setText("City:");

        dropDownCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dropDownCityItemStateChanged(evt);
            }
        });
        dropDownCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownCityActionPerformed(evt);
            }
        });

        jLabel4.setText("Community:");

        dropDownCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownCommunityActionPerformed(evt);
            }
        });

        jLabel5.setText("Mobile No.:");

        txtMobileNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMobileNoActionPerformed(evt);
            }
        });
        txtMobileNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMobileNoKeyPressed(evt);
            }
        });

        jLabel6.setText("Doctors present in the hospital:");

        tblDoctor.setBackground(new java.awt.Color(102, 153, 0));
        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Doctor ID", "Doctor Name"
            }
        ));
        jScrollPane2.setViewportView(tblDoctor);

        createEmployeeLabel.setBackground(new java.awt.Color(153, 153, 153));
        createEmployeeLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        createEmployeeLabel.setForeground(new java.awt.Color(0, 71, 119));
        createEmployeeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createEmployeeLabel.setText("MANAGE HOSPITAL RECORD");
        createEmployeeLabel.setToolTipText("To create new employee");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLogOut)
                        .addGap(69, 69, 69)
                        .addComponent(createEmployeeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnView)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd)
                                .addGap(171, 171, 171))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                            .addComponent(txtHospitalID)
                                            .addComponent(dropDownCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(dropDownCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtMobileNo))
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addGap(143, 143, 143)))))))))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnLogOut)
                    .addComponent(createEmployeeLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtHospitalID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropDownCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropDownCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(194, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        MainSystemJPanel mainSystem = new MainSystemJPanel(splitPanel,directory, doctorDirectory, hospitalDirectory, communityDirectory, personDirectory, cityDirectory);
        splitPanel.setRightComponent(mainSystem);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        MainJFrame topFrame = (MainJFrame) SwingUtilities.getWindowAncestor(this);
        topFrame.loadDefaultState();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHospital.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblHospital.getModel();
        Hospital h = (Hospital)model.getValueAt(selectedRowIndex, 0);
        
        txtHospitalID.setText(String.valueOf(h.getHospitalID()));
        txtHospitalID.setEditable(false);
        txtName.setText(String.valueOf(h.getHospitalName()));
        dropDownCity.setSelectedItem(String.valueOf(h.getCommunity().getCity().getCity()));
        dropDownCommunity.setSelectedItem(String.valueOf(h.getCommunity().getCommunity()));
        txtMobileNo.setText(String.valueOf(h.getMobileNo()));
        
        populateTableDoctor(h);
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private boolean isDigit(String s) {
        char[] chArr = s.toCharArray();
        for(char c: chArr) {
            if(!Character.isDigit(c))
                return false;
        }
        return true;
    }
    private boolean isLetter(String text) {
        char[] chArr = text.toCharArray();
        for(char c: chArr) {
            if(!Character.isLetter(c))
                return false;
        }
        return true;
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(txtName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(String.valueOf(txtMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        txtHospitalID.setEditable(false);
        int hospitalID = counter;
        counter++;
        String name = txtName.getText();
        String city = String.valueOf(dropDownCity.getSelectedItem());
        String community = dropDownCommunity.getSelectedItem().toString();
        String mobile = txtMobileNo.getText();
        
        Community c = communityDirectory.addNewCommunity();
        c.setCommunity(community);
        c.setCity(new City(city));
        
        Hospital h = HospitalDirectory.addNewHospital();
        h.setHospitalID(hospitalID);
        h.setHospitalName(name);
        h.setCommunity(c);
        h.setMobileNo(Long.parseLong(mobile));
        JOptionPane.showMessageDialog(this, "New Hospital Record Added.");
//        System.out.println(h.getHospitalName());
        populateTable();
        
        txtHospitalID.setText("");
        txtName.setText("");
        txtMobileNo.setText("");
    }//GEN-LAST:event_btnAddActionPerformed

    private void dropDownCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownCityActionPerformed
        // TODO add your handling code here:
//        String city = String.valueOf(dropDownCity.getSelectedItem());
//        for(Community community : CommunityDirectory.getCommunityDirectory())   {
//            if(community.getCity().getCity().equals(city)){
//                dropDownCommunity.addItem(community.getCommunity());
//            }
//        }
    }//GEN-LAST:event_dropDownCityActionPerformed

    private void dropDownCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dropDownCommunityActionPerformed

    private void dropDownCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dropDownCityItemStateChanged
        // TODO add your handling code here:
        String city = String.valueOf(dropDownCity.getSelectedItem());
        int itemCount = dropDownCommunity.getItemCount();
        for(int i = 0; i < itemCount; i++){
          dropDownCommunity.removeItemAt(0);
        }
        
        for(Community community : CommunityDirectory.getCommunityDirectory())   {
            if(community.getCity().getCity().equals(city)){
                dropDownCommunity.addItem(community.getCommunity());
            }
        }
    }//GEN-LAST:event_dropDownCityItemStateChanged

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if(txtName.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the First Name field empty!");
            return;
        }
        if(!isLetter(txtName.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter a valid Name!");
            return;
        } 
        if(String.valueOf(txtMobileNo.getText()).equals("")){
            JOptionPane.showMessageDialog(this,"Please do not leave the Mobile no. field empty!");
            return;
        }
        if(!isDigit(txtMobileNo.getText())) {
            JOptionPane.showMessageDialog(this,"Please enter mobile number!");
            return;
        }
        if(String.valueOf(txtMobileNo.getText()).length() != 10) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 10 DIGIT Mobile number!");
            return;
        }
        int selectedRowIndex = tblHospital.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;
        }
        txtHospitalID.setEditable(false);
        String hospitalID = String.valueOf(txtHospitalID.getText());
        String name = txtName.getText();
        String city = String.valueOf(dropDownCity.getSelectedItem());
        String community = dropDownCommunity.getSelectedItem().toString();
        String mobile = txtMobileNo.getText();
        
        Community c = communityDirectory.addNewCommunity();
        c.setCommunity(community);
        c.setCity(new City(city));
        
        Hospital h = HospitalDirectory.searchHospitalByID(hospitalID);
//        h.setHospitalID(Integer.parseInt(hospitalID));
        h.setHospitalName(name);
        h.setCommunity(c);
        h.setMobileNo(Long.parseLong(mobile));
        JOptionPane.showMessageDialog(this, "Hospital Record Uploaded.");
        txtHospitalID.setText("");
        txtName.setText("");
        txtMobileNo.setText("");       
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHospital.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View!");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblHospital.getModel();
        Hospital h = (Hospital)model.getValueAt(selectedRowIndex, 0);
        
        hospitalDirectory.deleteHospital(h);
        JOptionPane.showMessageDialog(this, "Hospital record deleted!");
        populateTable();
        txtHospitalID.setText("");
        txtName.setText("");
        txtMobileNo.setText(""); 
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtMobileNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMobileNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMobileNoActionPerformed

    private void txtMobileNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobileNoKeyPressed
        // TODO add your handling code here:
        char var = evt.getKeyChar();
        if(Character.isLetter(var)){
            txtMobileNo.setEditable(false);
            JOptionPane.showMessageDialog(null, "Character not allowed");
            txtMobileNo.requestFocus();
            txtMobileNo.setEditable(true);
        }
        String phoneNo = txtMobileNo.getText();
        int length = phoneNo.length();
        if(length>9){
            txtMobileNo.setEditable(false);
        }
        if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE){
            txtMobileNo.setEditable(true);
        }
    }//GEN-LAST:event_txtMobileNoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel createEmployeeLabel;
    private javax.swing.JComboBox<String> dropDownCity;
    private javax.swing.JComboBox<String> dropDownCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDoctor;
    private javax.swing.JTable tblHospital;
    private javax.swing.JTextField txtHospitalID;
    private javax.swing.JTextField txtMobileNo;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblHospital.getModel();
        model.setRowCount(0);
        
        for(Hospital h: HospitalDirectory.getHospitalDirectory()){
            Object[] row = new Object[4];
            row[0] = h;
//            System.out.println(".............."+row[0]);
            row[1] = h.getHospitalName();
            row[2] = h.getCommunity().getCommunity();
            row[3] = h.getMobileNo();
            model.addRow(row);
            
        }
    }

    private void populateTableDoctor(Hospital h) {
         DefaultTableModel model = (DefaultTableModel) tblDoctor.getModel();
        model.setRowCount(0);
        
        Object row[] = new Object[2];
       for(Doctor d : DoctorDirectory.getDoctorDirectory()){
           if(d.getHospital().equals(h.getHospitalName())){
               row[0] = d;
               row[1] = d.getFirstName();
               model.addRow(row);
           }
       }
    }
    
    
}
